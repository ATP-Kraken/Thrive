// Main menu script of Thrive
GUIBaseFile = "MainMenu.layout";
GUIAnimations = ["thrive.anims"];
RequireCEGUIHooked = true;
ExtraAccess = "FullFileSystem";



// This keeps the GUI always on (no mouse capture is used on the main menu)
o GuiCollection "OnKeeper"{
    l params{
        Enabled = true;
        KeepsGUIOn = true;
    }
}

// Top level window for all menus
o GuiCollection "Background"{
    l params{
        Enabled = true;
        AutoTarget = "Background";
    }
}

// main menu root window
o GuiCollection "TopLevelMenu"{
    l params{
        Enabled = true;
        AutoTarget = "Background/MainMenuInteractive";
        //AutoAnimateChildren = true;
        //AutoAnimationIn = [[AutoTarget], [PopIn]];
        //AutoAnimationOut = [[AutoTarget], [SinkAway]];
    }
}

// Root of the cell stage GUI
o GuiCollection "MicrobeRoot"{
    l params{
        Enabled = false;
        AutoTarget = "MicrobeStageRoot";
    }
}

// ------------------------------------ //
// This creates the intro video player
o GuiObject "_IntroVideoStarter"{
    s{
        GuiObject@ OurObject;
        bool PlayingVideo = false;

        // Comment the next line to not play intro video
        [@Listener="OnInit"]
        void StartVideoPlayback(GuiObject@ instance){

            LOG_INFO("Starting to play intro video");
            CEGUI::Window@ videoPlayer = instance.GetOwningManager().GetRootWindow().
                 CreateAndAddChild("Thrive/VideoPlayer", "MainMenuVideoPlayer");

            videoPlayer.SetSize(1.0, 0, 1.0, 0);

            auto@ castedPlayer = cast<CEGUIVideoPlayer>(videoPlayer);

            // Grab the created window as our own
            instance.ConnectElement(videoPlayer);

            if(!instance.IsCEGUIEventHooked()){

                LOG_ERROR("IntroVideoStarter failed to bind to the created video "
                    "player widget");
                return;
            }

            // Save object for callback //
            @OurObject = instance;

            // Register end callback //
            castedPlayer.OnPlaybackEnded.Register(@OnVideoEnded);

            // Start playback
            castedPlayer.Play("Data/Videos/intro.mkv");
            PlayingVideo = true;
            
            return;
        }

        [@Listener="OnClick"]
        void VideoPlayerClicked(GuiObject@ instance){

             LOG_INFO("VideoPlayer clicked");
             return;
        }

        void DestroyVideoPlayerWindow(){
             // Make sure this is called only once
             if(!PlayingVideo)
                return;

             PlayingVideo = false;
             LOG_INFO("Destroying VideoPlayer window");
             OurObject.GetOwningManager().GetRootWindow().
                 DestroyChild("MainMenuVideoPlayer");
        }

        // Called by the videoplayer when the playback ends
        void OnVideoEnded(NamedVars@ values){

             LOG_INFO("Intro video ended");
             GetEngine().Invoke(@DestroyVideoPlayerWindow);
        }
        
        // User pressed skip intro video button
        [@Listener="Generic", @Type="MainMenuIntroSkipEvent"]
        int onSkipVideoEvent(GuiObject@ instance, GenericEvent@ event){
            if(PlayingVideo){
                OnVideoEnded(NamedVars());
                return 1;
            } else {
                return 0;
            }
        }
    @%};
}




// ------------------------------------ //
// Main menu objects
// Version label
o GuiObject "Background/MainMenuInteractive/VersionLabel"{
    s{
        [@Listener="OnInit"]
        void WriteVersion(GuiObject@ instance){
            instance.GetTargetWindow().SetText("TODO: ver (" + GetLeviathanVersion() +
                 ")");

            return;
        }
    @%};
}
//Load the game//
o GuiObject "Background/MainMenuInteractive/LoadGameButton"{
    s{
	
		[@Listener="OnInit"]
		void checkforSave(GuiObject@ instance){
            // disable if no saved game //
			//for some reaosn I cannot call FileSystem::FileExists even though it works fine in the other angel scripts - Michael
            // This now works with new ExtraAccess setting (also it was a static function so it
            // is called like this) - hhyyrylainen
		    if (!FileSystem::FileExists("quick.sav")) {
				instance.GetTargetWindow().SetDisabledState(true);
			}
            return;
        }
        [@Listener="OnClick"]
        bool LoadIt(GuiObject@ instance){
            // Load the game //
            LOG_INFO("TODO: load game code");
            return true;
        }
        @%};
}

// Quit the game //
o GuiObject "Background/MainMenuInteractive/ExitGameButton"{
    s{
        [@Listener="OnClick"]
        void QuitIt(GuiObject@ instance){
            // Close the game //
            cast<LeviathanApplication>(GetThriveGame()).MarkAsClosing();
            return;
        }
        @%};
}


// Start game //
o GuiObject "Background/MainMenuInteractive/NewGameButton"{
    s{
        [@Listener="OnClick"]
        void StartGame(GuiObject@ instance){
            // Disable all the menus
            instance.GetOwningManager().SetCollectionState("Background", false);
            // And show the microbe GUI
            instance.GetOwningManager().SetCollectionState("MicrobeRoot", true);
            

            // And notify the application class to start a new game
            GetThriveGame().startNewGame();
            return;
        }

        // Uncomment the next line to automatically start a new game
        // also remember to disable the intro video to not hear it also play
        // [@Listener="OnInit"]
        void InstantStart(GuiObject@ instance){

             StartGame(instance);
             return;
        }
        
        @%};
}

o GuiObject "_musicPlayer"{
    s{
        [@Listener="OnTick"]
        void update(GuiObject@ instance){
			//SoundDevice device = GetSoundDevice();
			//GetEngine().PlaySoundEffect("main-menu-theme-1.ogg");
            return;
        }
    @%};
}

// ------------------------------------ //


